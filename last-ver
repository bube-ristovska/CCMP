import javax.crypto.Cipher;
import javax.crypto.spec.SecretKeySpec;
import java.io.UnsupportedEncodingException;
import java.nio.charset.StandardCharsets;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.*;
import java.util.stream.Collectors;

class AES {

    private static SecretKeySpec secretKey;
    private static byte[] key;

    public static void setKey(String myKey) {
        MessageDigest sha = null;
        try {
            key = myKey.getBytes("UTF-8");
            sha = MessageDigest.getInstance("SHA-256");
            key = sha.digest(key);
            key = Arrays.copyOf(key, 16);
            secretKey = new SecretKeySpec(key, "AES");
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        } catch (UnsupportedEncodingException e) {
            e.printStackTrace();
        }
    }

    public static byte[] encrypt(byte[] strToEncrypt, String secret) {
        try {
            setKey(secret);
            Cipher cipher = Cipher.getInstance("AES/ECB/NoPadding");
            cipher.init(Cipher.ENCRYPT_MODE, secretKey);
            return cipher.doFinal(strToEncrypt);
        } catch (Exception e) {
            System.out.println("Error while encrypting: " + e.toString());
        }
        return null;
    }

    public static byte[] decrypt(byte[] strToDecrypt, String secret) {
        try {
            setKey(secret);
            Cipher cipher = Cipher.getInstance("AES/ECB/NoPadding");
            cipher.init(Cipher.DECRYPT_MODE, secretKey);
            return cipher.doFinal(strToDecrypt);
        } catch (Exception e) {
            System.out.println("Error while decrypting: " + e.toString());
        }
        return null;
    }
}
class HelperFunctions {
    public static String bytesToHex(byte[] bytes) {
        StringBuilder hexString = new StringBuilder(2 * bytes.length);
        for (byte b : bytes) {
            hexString.append(String.format("%02X", b));
        }
        return hexString.toString();
    }
    public static byte[] xorByteArrays(byte[] a, byte[] b) {
        if (a.length != b.length) {
            throw new IllegalArgumentException("Input arrays must have the same length.");
        }

        byte[] result = new byte[a.length];
        for (int i = 0; i < a.length; i++) {
            result[i] = (byte) (a[i] ^ b[i]);
        }
        return result;
    }
    public static List<byte[]> paddingAndBlocks(String inputString) {
        // simulation of PKCS#7 padding scheme
        byte[] inputBytes = inputString.getBytes(StandardCharsets.UTF_8);
        int blockSize = 16;
        int paddingSize = blockSize - (inputBytes.length % blockSize);
        byte[] paddedBytes = new byte[inputBytes.length + paddingSize];

        System.arraycopy(inputBytes, 0, paddedBytes, 0, inputBytes.length);

        Arrays.fill(paddedBytes, inputBytes.length, paddedBytes.length, (byte) paddingSize);
        paddedBytes[paddedBytes.length - 1] = (byte) paddingSize; // last byte that indicates how big is the padding

        List<byte[]> blocks = new ArrayList<>();
        for (int i = 0; i < paddedBytes.length; i += blockSize) {
            byte[] block = Arrays.copyOfRange(paddedBytes, i, i + blockSize);
            blocks.add(block);
        }
        return blocks;
    }

    public static String generateSecretKey() {
        byte[] secretKey = new byte[16]; // 128 bit
        new Random().nextBytes(secretKey);
        /*
         String secretKeyHex = bytesToHex(secretKey);
         System.out.printf("Your secret key in HEX is:" + secretKeyHex + "\n");
        */
        return bytesToHex(secretKey);
    }

    public static EncryptedFrame encryptBlocksECB(ClearTextFrame frame, String secretKey) {
        List<byte[]> byteArrays = new ArrayList<>();

        // Ctr Preload = PL + IV
        byte[] PL = "000".getBytes();
        byte [] ctrPreload = new byte[16];
        System.arraycopy(frame.IV, 0, ctrPreload, 0, 13);
        System.arraycopy(PL, 0, ctrPreload, 13, 3);
        incrementCounter(ctrPreload);

        for (byte[] block : frame.blocks) {
            // System.out.println("PL:" + ByteArrayToHexString.bytesToHex(ctrPreload));
            byte[] aesResult = AES.encrypt(ctrPreload, secretKey);
            byte[] data = xorByteArrays(block, aesResult);
            byteArrays.add(data);
            incrementCounter(ctrPreload);
        }

        // concat
        int totalLength = byteArrays.stream().mapToInt(arr -> arr.length).sum();
        int offset = 0;
        byte[] result = new byte[totalLength];
        for (byte[] array : byteArrays) {
            System.arraycopy(array, 0, result, offset, array.length);
            offset += array.length;
        }

        EncryptedFrame ef = new EncryptedFrame(frame.frameHeader, HelperFunctions.bytesToHex(result), frame.MIC,byteArrays, frame.IV);
        return ef;
    }


    static void incrementCounter(byte[] counter) {
        for (int i = counter.length - 1; i >= 0; i--) {
            if (counter[i] == (byte) 0xFF) {
                counter[i] = 0;
            } else {
                counter[i]++;
                break;
            }
        }
    }
    public static void calculateMIC(Frame frame, String secretKey) {
        long PN = frame.getPacketNumber(); // 48 bits
        long sourceMac = frame.getSourceMac(); // 48 bits
        long qosPriority = 4; // 8 bits

        long nonceIV = (PN << 56) | (sourceMac << 8) | qosPriority;

        byte[] result = AES.encrypt(Long.toHexString(nonceIV).getBytes(), secretKey);
        frame.IV = Long.toHexString(nonceIV).getBytes();

        // chaining method MIC
        for (byte[] block : frame.blocks) {
            result = xorByteArrays(block, result);
            //System.out.println("XOR result:"+ByteArrayToHexString.bytesToHex(result));
            result = AES.encrypt(result, secretKey);
            //System.out.println("AES result:"  + ByteArrayToHexString.bytesToHex(result));

        }
        frame.MIC = Arrays.copyOfRange(result, 0, 8);  // getting only the first 64 bits

        // Ctr Preload = PL + IV
        byte[] PL = "000".getBytes();
        byte [] ctrPreload = new byte[16];
        System.arraycopy(frame.IV, 0, ctrPreload, 0, 13);
        System.arraycopy(PL, 0, ctrPreload, 13, 3);

        // To finalize MIC we needed this preload(0)
        byte[] mostSigBytesAESctr = new byte[8];
        System.arraycopy(AES.encrypt(ctrPreload, secretKey), 0, mostSigBytesAESctr, 0, 8);

        frame.MIC = xorByteArrays(mostSigBytesAESctr, frame.MIC);
    }

    public static String removePadding(String decryptedString) {
        byte[] paddedBytes = decryptedString.getBytes(StandardCharsets.UTF_8);
        int paddingSize = paddedBytes[paddedBytes.length - 1];
        byte[] originalData = new byte[paddedBytes.length - paddingSize];
        System.arraycopy(paddedBytes, 0, originalData, 0, originalData.length);
        return new String(originalData, StandardCharsets.UTF_8);
    }
}
class FrameHeader {
    String destMacAddr = "00:1A:2B:3C:4D:5E";
    String sourceMacAddr = "12:1A:2B:3C:4D:5E";
    String etherType = "IP"; // just for simulation


    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("Source MAC = ").append(sourceMacAddr).append('\n')
                .append("Destination MAC = ").append(destMacAddr).append('\n')
                .append("EtherType = ").append(etherType);
        return sb.toString();
    }

}
class Frame {
    final long PN = 0x36CCCD8CCD8CL; // 48-bit packet number(PN)
    FrameHeader frameHeader;
    List<byte[]> blocks = new ArrayList<>(); // the data with padding
    byte[] MIC;
    byte [] IV;

    public Frame() {
        this.frameHeader = new FrameHeader();
    }

    public long getPacketNumber() {
        return PN;
    }
    public long getSourceMac() {
        String result = frameHeader.sourceMacAddr.replace(":", "");
        return Long.parseLong(result, 16);
    }
}

class ClearTextFrame extends Frame {
    String clearTextPayload; // for visually showing
    public ClearTextFrame(String message) {
        super();
        this.blocks = HelperFunctions.paddingAndBlocks(message); // padding to the message
        clearTextPayload = message;
    }
    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("Frame header:").append('\n').append(frameHeader).append('\n');
        sb.append("PN:").append(PN).append('\n');
        sb.append("MIC:").append(HelperFunctions.bytesToHex(MIC)).append('\n');
        sb.append("Data:").append(clearTextPayload).append('\n');

        return sb.toString();
    }
}
class EncryptedFrame extends Frame {
    String dataEncrypted;
    byte[] micFromTheOtherSide;

    List<byte[]> blocksEncrypted = new ArrayList<>(); // the data with padding
    public EncryptedFrame(FrameHeader frameHeader, String s, byte[] mic, List<byte[]> arr, byte[] iv) {
        super();
        this.frameHeader = frameHeader;
        this.dataEncrypted = s;
        this.micFromTheOtherSide = mic;
        this.blocksEncrypted = arr;
        this.IV = iv;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("Encrypted Text Frame").append('\n');
        sb.append("Frame header is the same:").append('\n').append(frameHeader).append('\n');
        sb.append("PN also the same").append(PN).append('\n');
        sb.append("MIC:").append(HelperFunctions.bytesToHex(MIC)).append('\n');
        sb.append("Data encrypted:").append(dataEncrypted).append('\n');

        return sb.toString();
    }

    public String decrypt(String secretKey) {
        List<byte[]> byteArrays = new ArrayList<>();

        // Ctr Preload = PL + IV
        byte[] PL = "000".getBytes();
        byte [] ctrPreload = new byte[16];
        System.arraycopy(IV, 0, ctrPreload, 0, 13);
        System.arraycopy(PL, 0, ctrPreload, 13, 3);
        HelperFunctions.incrementCounter(ctrPreload); // PL(1)

        // decrypting blocks
        for (byte[] block : blocksEncrypted) {
            //System.out.println("Encrypted block:" + new String(block, StandardCharsets.UTF_8));
            // System.out.println("PL:" + ByteArrayToHexString.bytesToHex(ctrPreload));
            byte[] aesResult = AES.encrypt(ctrPreload, secretKey);
            byte[] data = HelperFunctions.xorByteArrays(block, aesResult);
            byteArrays.add(data);
            HelperFunctions.incrementCounter(ctrPreload);
        }

        blocks = byteArrays; // block needed to check the mic for authenticity

        List<String> utfStrings = new ArrayList<>();
        for (byte[] byteArray : byteArrays) {
            String utfString = new String(byteArray, StandardCharsets.UTF_8);
            utfStrings.add(utfString);
        }

        return utfStrings.stream().collect(Collectors.joining(""));
    }
}

public class Main {
    public static void main(String[] args) throws InterruptedException {
        Scanner sc = new Scanner(System.in);
        System.out.println("Enter the data you want to send:");
        String message;
        message = sc.nextLine();
        sc.close();

        final String secretKey = HelperFunctions.generateSecretKey();

        ClearTextFrame frame = new ClearTextFrame(message);
        HelperFunctions.calculateMIC(frame, secretKey);
        System.out.println("==============Clear Frame=============");
        System.out.print(frame.toString());
        EncryptedFrame encryptedFrame = HelperFunctions.encryptBlocksECB(frame, secretKey);
        System.out.println("======================================");

        System.out.println();
        System.out.println("Encrypted Frame it's sending, please wait........"); // for simulation
        Thread.sleep(2000);
        System.out.println();
        String decryptedString = encryptedFrame.decrypt(secretKey); // setting the blocks decrypted for the calculate MIC function
        HelperFunctions.calculateMIC(encryptedFrame, secretKey);
        System.out.println();

        System.out.println("==============Encrypted Frame=============");
        System.out.print(encryptedFrame);
        System.out.println("======================================");

        System.out.println();
        System.out.println("Checking if the MICs are equal...");
        Thread.sleep(2000);
        boolean flag = Arrays.toString(encryptedFrame.MIC).equals(Arrays.toString(encryptedFrame.micFromTheOtherSide));
        if(flag) {
            System.out.println("True, the message wasn't altered");
            System.out.println("The decrypted message is: " + HelperFunctions.removePadding(decryptedString));

        } else {
            System.err.println("False, the message was altered, channel compromised!!!");
        }
    }

}
